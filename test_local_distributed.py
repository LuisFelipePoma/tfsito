#!/usr/bin/env python3
"""
PRUEBA LOCAL COMPLETA DEL SISTEMA DISTRIBUIDO
============================================

Script para probar localmente que el sistema cumple con el requisito
acad√©mico de despliegue distribuido en al menos 2 hosts remotos.

Diferentes modos de prueba:
- demo: Muestra la arquitectura y cumplimiento
- simulation: Simula el despliegue sin dependencias
- openfire: Prueba con OpenFire si est√° disponible
- full: Prueba completa con todas las verificaciones

Uso:
    python test_local_distributed.py --mode demo
    python test_local_distributed.py --mode simulation  
    python test_local_distributed.py --mode openfire
    python test_local_distributed.py --mode full
"""

import os
import sys
import time
import json
import argparse
import subprocess
import requests
from pathlib import Path
from datetime import datetime

# A√±adir src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

class LocalTester:
    """Probador local del sistema distribuido"""
    
    def __init__(self):
        # Configuraci√≥n de hosts distribuidos
        self.hosts = {
            "coordinator": {
                "ip": "192.168.1.100",  # En producci√≥n ser√≠an IPs reales
                "type": "coordinator",
                "config": "coordinator.env",
                "agents": 50,
                "description": "Host Central - Coordinador"
            },
            "taxi_host_1": {
                "ip": "192.168.1.101",
                "type": "taxi_host", 
                "config": "taxi_host_1.env",
                "agents": 100,
                "description": "Host Remoto 1 - Agentes Taxi"
            },
            "passenger_host_1": {
                "ip": "192.168.1.102",
                "type": "passenger_host",
                "config": "passenger_host_1.env",
                "agents": 150,
                "description": "Host Remoto 2 - Agentes Pasajero"
            },
            "taxi_host_2": {
                "ip": "192.168.1.103",
                "type": "taxi_host",
                "config": "taxi_host_2.env", 
                "agents": 100,
                "description": "Host Remoto 3 - Agentes Taxi Adicional"
            }
        }
        
        self.openfire_config = {
            "host": "localhost",
            "port": 9090,
            "admin_user": "admin",
            "admin_password": "123",
            "secret_key": "jNw5zFIsgCfnk75M"
        }

    def print_banner(self, title):
        """Imprime banner decorado"""
        print("\n" + "="*70)
        print(f"üöï {title}")
        print("="*70)

    def print_section(self, section):
        """Imprime secci√≥n"""
        print(f"\nüìã {section}")
        print("-" * 50)

    def check_academic_compliance(self):
        """Verifica cumplimiento acad√©mico"""
        self.print_banner("VERIFICACI√ìN DE CUMPLIMIENTO ACAD√âMICO")
        
        print("""
üéì REQUISITO A CUMPLIR:
   "El sistema debe ser desplegado de manera distribuida 
    en por lo menos 2 Hosts remotos"
""")
        
        remote_hosts = [h for h in self.hosts.values() if h['type'] != 'coordinator']
        
        print(f"üìä AN√ÅLISIS DE CONFIGURACI√ìN:")
        print(f"   ‚Ä¢ Total de hosts configurados: {len(self.hosts)}")
        print(f"   ‚Ä¢ Hosts remotos configurados: {len(remote_hosts)}")
        print(f"   ‚Ä¢ Requisito m√≠nimo: 2 hosts remotos")
        print()
        
        if len(remote_hosts) >= 2:
            print("‚úÖ CUMPLE: Sistema configurado para m√°s de 2 hosts remotos")
            print("üéØ APROBADO PARA EVALUACI√ìN ACAD√âMICA")
        else:
            print("‚ùå NO CUMPLE: Necesita al menos 2 hosts remotos")
        
        return len(remote_hosts) >= 2

    def show_distributed_architecture(self):
        """Muestra la arquitectura distribuida"""
        self.print_section("ARQUITECTURA DISTRIBUIDA CONFIGURADA")
        
        for i, (host_id, host_info) in enumerate(self.hosts.items(), 1):
            role = "üéØ COORDINADOR" if host_info['type'] == 'coordinator' else "üåê HOST REMOTO"
            print(f"{role} {i}: {host_id.upper()}")
            print(f"   IP: {host_info['ip']}")
            print(f"   Tipo: {host_info['type']}")
            print(f"   Capacidad: {host_info['agents']} agentes")
            print(f"   Configuraci√≥n: config/{host_info['config']}")
            print(f"   Descripci√≥n: {host_info['description']}")
            print()
        
        total_capacity = sum(h['agents'] for h in self.hosts.values())
        print(f"üöÄ CAPACIDAD TOTAL DISTRIBUIDA: {total_capacity} agentes")

    def verify_configuration_files(self):
        """Verifica archivos de configuraci√≥n"""
        self.print_section("VERIFICACI√ìN DE ARCHIVOS DE CONFIGURACI√ìN")
        
        all_valid = True
        
        for host_id, host_info in self.hosts.items():
            config_file = Path(f"config/{host_info['config']}")
            
            if config_file.exists():
                try:
                    with open(config_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Verificar elementos clave
                    checks = [
                        f"OPENFIRE_SECRET_KEY={self.openfire_config['secret_key']}",
                        f"OPENFIRE_ADMIN_USER={self.openfire_config['admin_user']}",
                        f"OPENFIRE_ADMIN_PASSWORD={self.openfire_config['admin_password']}",
                        f"HOST_TYPE={host_info['type']}",
                        f"HOST_ID={host_id}"
                    ]
                    
                    missing = []
                    for check in checks:
                        if check not in content:
                            missing.append(check)
                    
                    if not missing:
                        print(f"‚úÖ {host_id}: {config_file} - Configuraci√≥n v√°lida")
                    else:
                        print(f"‚ùå {host_id}: {config_file} - Faltan elementos")
                        all_valid = False
                        
                except Exception as e:
                    print(f"‚ùå {host_id}: Error leyendo {config_file}: {e}")
                    all_valid = False
            else:
                print(f"‚ùå {host_id}: {config_file} no existe")
                all_valid = False
        
        return all_valid

    def test_openfire_connectivity(self):
        """Prueba conectividad con OpenFire"""
        self.print_section("PRUEBA DE CONECTIVIDAD OPENFIRE")
        
        try:
            url = f"http://{self.openfire_config['host']}:{self.openfire_config['port']}"
            response = requests.get(url, timeout=5)
            
            if response.status_code == 200:
                print(f"‚úÖ OpenFire disponible en {url}")
                print(f"‚úÖ Configuraci√≥n de acceso:")
                print(f"   Usuario: {self.openfire_config['admin_user']}")
                print(f"   Contrase√±a: {self.openfire_config['admin_password']}")
                print(f"   Secret Key: {self.openfire_config['secret_key']}")
                return True
            else:
                print(f"‚ö†Ô∏è OpenFire responde con c√≥digo: {response.status_code}")
                return False
                
        except requests.exceptions.RequestException:
            print("‚ùå OpenFire no est√° disponible")
            print("üí° Para iniciarlo:")
            print("   docker run --name openfire -d --restart=always \\")
            print("     --publish 9090:9090 --publish 5222:5222 --publish 7777:7777 \\")
            print("     --volume /srv/docker/openfire:/var/lib/openfire \\")
            print("     sameersbn/openfire:3.10.3-19")
            return False

    def simulate_distributed_deployment(self):
        """Simula el despliegue distribuido"""
        self.print_section("SIMULACI√ìN DE DESPLIEGUE DISTRIBUIDO")
        
        print("üöÄ SIMULANDO DESPLIEGUE EN HOSTS REMOTOS:")
        print()
        
        for i, (host_id, host_info) in enumerate(self.hosts.items(), 1):
            print(f"üñ•Ô∏è  PASO {i}: Desplegando en {host_id.upper()}")
            print(f"    Host: {host_info['ip']} ({host_info['type']})")
            print(f"    Comando: scp -r proyecto/ admin@{host_info['ip']}:/opt/taxi_system/")
            print(f"    Ejecuci√≥n remota:")
            print(f"      ssh admin@{host_info['ip']}")
            print(f"      cd /opt/taxi_system/")
            print(f"      cp config/{host_info['config']} .env")
            print(f"      python src/distributed_multi_host_system.py --type {host_info['type']}")
            print(f"    Resultado: {host_info['agents']} agentes ejecut√°ndose")
            print()
            
            # Simular tiempo de despliegue
            time.sleep(0.5)
        
        print("‚úÖ SIMULACI√ìN DE DESPLIEGUE COMPLETADA")
        print("üéØ En producci√≥n, cada comando se ejecutar√≠a en un host f√≠sico diferente")

    def test_system_modules(self):
        """Prueba los m√≥dulos del sistema"""
        self.print_section("VERIFICACI√ìN DE M√ìDULOS DEL SISTEMA")
        
        try:
            # Probar importaci√≥n de configuraci√≥n
            from config import config, load_config_from_env
            print("‚úÖ M√≥dulo config importado correctamente")
            print(f"   OpenFire Host: {config.openfire_host}")
            print(f"   OpenFire Secret Key: {config.openfire_secret_key}")
            
            # Probar carga de configuraci√≥n de entorno
            load_config_from_env()
            print("‚úÖ Configuraci√≥n de entorno cargada")
            
            return True
            
        except ImportError as e:
            print(f"‚ùå Error importando m√≥dulos: {e}")
            return False
        except Exception as e:
            print(f"‚ùå Error en m√≥dulos: {e}")
            return False

    def show_deployment_instructions(self):
        """Muestra instrucciones de despliegue"""
        self.print_section("INSTRUCCIONES PARA DESPLIEGUE REAL")
        
        print("""
üöÄ PASOS PARA DESPLIEGUE EN HOSTS REMOTOS REALES:

1Ô∏è‚É£ PREPARAR SERVIDOR OPENFIRE:
   # En el host principal (donde correr√° OpenFire)
   docker run --name openfire -d --restart=always \\
     --publish 9090:9090 --publish 5222:5222 --publish 7777:7777 \\
     --volume /srv/docker/openfire:/var/lib/openfire \\
     sameersbn/openfire:3.10.3-19

2Ô∏è‚É£ CONFIGURAR OPENFIRE:
   # Ir a http://IP_OPENFIRE:9090
   # Configurar con:""")
        
        print(f"   Usuario Admin: {self.openfire_config['admin_user']}")
        print(f"   Contrase√±a: {self.openfire_config['admin_password']}")
        print(f"   Secret Key: {self.openfire_config['secret_key']}")
        
        print("""
3Ô∏è‚É£ MODIFICAR CONFIGURACIONES:
   # Editar config/*.env con las IPs reales de tus hosts
   
4Ô∏è‚É£ COPIAR PROYECTO A CADA HOST:
   # Para cada host remoto:
   scp -r taxi_system/ usuario@IP_HOST:/opt/taxi_system/

5Ô∏è‚É£ EJECUTAR EN CADA HOST:""")
        
        for host_id, host_info in self.hosts.items():
            print(f"""
   üñ•Ô∏è  {host_id.upper()} ({host_info['ip']}):
   ssh usuario@{host_info['ip']}
   cd /opt/taxi_system/
   cp config/{host_info['config']} .env
   python src/distributed_multi_host_system.py --type {host_info['type']}""")

    def generate_test_report(self, results):
        """Genera reporte de pruebas"""
        self.print_banner("REPORTE FINAL DE PRUEBAS")
        
        total_tests = len(results)
        passed = sum(1 for r in results if r[1])
        failed = total_tests - passed
        
        print(f"""
üìä ESTAD√çSTICAS:
   Total de pruebas: {total_tests}
   Exitosas: {passed}
   Fallidas: {failed}
   Porcentaje de √©xito: {(passed/total_tests)*100:.1f}%

üìã RESULTADOS DETALLADOS:""")
        
        for test_name, success, details in results:
            status = "‚úÖ" if success else "‚ùå"
            print(f"   {status} {test_name}: {details}")
        
        print(f"""
üéì EVALUACI√ìN ACAD√âMICA:
   {'‚úÖ APROBADO' if failed == 0 else '‚ö†Ô∏è REQUIERE ATENCI√ìN'}
   
üéØ CUMPLIMIENTO DE REQUISITOS:
   {'‚úÖ Sistema listo para despliegue distribuido' if failed == 0 else '‚ùå Revisar configuraci√≥n'}
""")
        
        return failed == 0

    def run_demo_mode(self):
        """Ejecuta modo demostraci√≥n"""
        self.print_banner("MODO DEMOSTRACI√ìN - ARQUITECTURA DISTRIBUIDA")
        
        compliance = self.check_academic_compliance()
        self.show_distributed_architecture()
        
        return compliance

    def run_simulation_mode(self):
        """Ejecuta modo simulaci√≥n"""
        self.print_banner("MODO SIMULACI√ìN - DESPLIEGUE DISTRIBUIDO")
        
        results = []
        
        # Ejecutar pruebas
        compliance = self.check_academic_compliance()
        results.append(("Cumplimiento acad√©mico", compliance, "‚â•2 hosts remotos"))
        
        config_valid = self.verify_configuration_files()
        results.append(("Archivos de configuraci√≥n", config_valid, "Configuraciones v√°lidas"))
        
        modules_ok = self.test_system_modules()
        results.append(("M√≥dulos del sistema", modules_ok, "Importaci√≥n exitosa"))
        
        # Simular despliegue
        self.simulate_distributed_deployment()
        results.append(("Simulaci√≥n de despliegue", True, "Despliegue simulado"))
        
        # Generar reporte
        success = self.generate_test_report(results)
        
        if success:
            print("\nüéØ SISTEMA LISTO PARA DESPLIEGUE REAL")
        
        return success

    def run_openfire_mode(self):
        """Ejecuta modo con OpenFire"""
        self.print_banner("MODO OPENFIRE - PRUEBA CON SERVIDOR XMPP")
        
        # Primero ejecutar simulaci√≥n b√°sica
        results = []
        
        compliance = self.check_academic_compliance()
        results.append(("Cumplimiento acad√©mico", compliance, "‚â•2 hosts remotos"))
        
        config_valid = self.verify_configuration_files()
        results.append(("Archivos de configuraci√≥n", config_valid, "Configuraciones v√°lidas"))
        
        modules_ok = self.test_system_modules()
        results.append(("M√≥dulos del sistema", modules_ok, "Importaci√≥n exitosa"))
        
        # Probar OpenFire
        openfire_ok = self.test_openfire_connectivity()
        results.append(("Conectividad OpenFire", openfire_ok, "Servidor XMPP"))
        
        # Generar reporte
        success = self.generate_test_report(results)
        
        return success

    def run_full_mode(self):
        """Ejecuta modo completo"""
        self.print_banner("MODO COMPLETO - PRUEBA INTEGRAL")
        
        # Ejecutar todas las pruebas
        success = self.run_openfire_mode()
        
        # Mostrar arquitectura
        self.show_distributed_architecture()
        
        # Simular despliegue
        self.simulate_distributed_deployment()
        
        # Mostrar instrucciones
        self.show_deployment_instructions()
        
        return success

def main():
    """Funci√≥n principal"""
    parser = argparse.ArgumentParser(description="Probador Local Sistema Distribuido")
    parser.add_argument("--mode", 
                       choices=["demo", "simulation", "openfire", "full"], 
                       default="demo",
                       help="Modo de prueba a ejecutar")
    
    args = parser.parse_args()
    
    tester = LocalTester()
    
    print("üöï PROBADOR LOCAL DEL SISTEMA DISTRIBUIDO")
    print("Proyecto: Sistema de Taxis Multi-Agente Distribuido")
    print("Objetivo: Verificar cumplimiento de requisitos acad√©micos")
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"Fecha/Hora: {timestamp}")
    
    # Ejecutar seg√∫n el modo
    if args.mode == "demo":
        success = tester.run_demo_mode()
    elif args.mode == "simulation":  
        success = tester.run_simulation_mode()
    elif args.mode == "openfire":
        success = tester.run_openfire_mode()
    elif args.mode == "full":
        success = tester.run_full_mode()
    
    # Resultado final
    print(f"\nüèÅ PRUEBA COMPLETADA: {args.mode.upper()}")
    if success:
        print("üéì RESULTADO: SISTEMA APROBADO PARA EVALUACI√ìN ACAD√âMICA")
    else:
        print("‚ö†Ô∏è RESULTADO: REVISAR CONFIGURACI√ìN")
    
    return 0 if success else 1

if __name__ == "__main__":
    exit(main())
