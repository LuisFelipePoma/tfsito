#!/usr/bin/env python3
"""
Prueba Comprehensiva del Sistema de Taxis Distribuido
====================================================

Este script ejecuta una serie de pruebas para verificar que todo
el sistema est√© funcionando correctamente.
"""

import subprocess
import time
import requests
import os
import sys
from pathlib import Path

# Agregar el directorio src al path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def print_header(title):
    """Imprime un header decorado"""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def print_success(message):
    """Imprime un mensaje de √©xito"""
    print(f"‚úÖ {message}")

def print_error(message):
    """Imprime un mensaje de error"""
    print(f"‚ùå {message}")

def print_warning(message):
    """Imprime un mensaje de advertencia"""
    print(f"‚ö†Ô∏è  {message}")

def test_dependencies():
    """Verifica que todas las dependencias est√©n instaladas"""
    print_header("Verificando Dependencias")
    
    try:
        import ortools
        print_success("OR-Tools instalado correctamente")
    except ImportError:
        print_error("OR-Tools no est√° instalado. Ejecute: pip install ortools")
        return False
    
    try:
        import spade
        print_success("SPADE instalado correctamente")
    except ImportError:
        print_error("SPADE no est√° instalado. Ejecute: pip install spade")
        return False
    
    try:
        import tkinter
        print_success("Tkinter disponible para GUI")
    except ImportError:
        print_warning("Tkinter no disponible - GUI no funcionar√°")
    
    return True

def test_docker_openfire():
    """Verifica que Docker y OpenFire est√©n funcionando"""
    print_header("Verificando Docker y OpenFire")
    
    # Verificar Docker
    try:
        result = subprocess.run(["docker", "ps"], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            if "openfire" in result.stdout:
                print_success("Contenedor OpenFire est√° ejecut√°ndose")
            else:
                print_error("Contenedor OpenFire no encontrado")
                print("Para iniciarlo: docker-compose up -d openfire")
                return False
        else:
            print_error("Docker no est√° disponible o no est√° ejecut√°ndose")
            return False
    except subprocess.TimeoutExpired:
        print_error("Timeout al verificar Docker")
        return False
    except FileNotFoundError:
        print_error("Docker no est√° instalado")
        return False
    
    # Verificar API de OpenFire
    try:
        response = requests.get("http://localhost:9090", timeout=5)
        if response.status_code == 200:
            print_success("OpenFire API accesible en http://localhost:9090")
        else:
            print_warning(f"OpenFire responde pero con c√≥digo {response.status_code}")
    except requests.RequestException as e:
        print_error(f"No se puede conectar a OpenFire API: {e}")
        return False
    
    return True

def test_local_system():
    """Prueba el sistema local (no distribuido)"""
    print_header("Probando Sistema Local")
    
    try:
        os.chdir(Path(__file__).parent / "src")
        result = subprocess.run([sys.executable, "quick_test.py"], 
                              capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print_success("Sistema local funciona correctamente")
            print("üìä Resultados de la prueba:")
            # Mostrar solo las l√≠neas importantes
            for line in result.stdout.split('\n'):
                if any(marker in line for marker in ['‚úÖ', 'üéâ', 'TODAS LAS PRUEBAS']):
                    print(f"   {line}")
            return True
        else:
            print_error("Sistema local fall√≥")
            print("‚ùå Error:", result.stderr[-500:])  # √öltimos 500 caracteres del error
            return False
            
    except subprocess.TimeoutExpired:
        print_error("Timeout en prueba del sistema local")
        return False
    except Exception as e:
        print_error(f"Error ejecutando prueba local: {e}")
        return False

def test_spade_connection():
    """Prueba la conexi√≥n SPADE con OpenFire"""
    print_header("Probando Conexi√≥n SPADE")
    
    try:
        # Cambiar al directorio del proyecto
        original_dir = os.getcwd()
        os.chdir(Path(__file__).parent)
        
        # Crear script de prueba r√°pida
        test_script = """
import sys
import asyncio
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from spade.agent import Agent
from spade.behaviour import OneShotBehaviour
import time

class TestAgent(Agent):
    class TestBehaviour(OneShotBehaviour):
        async def run(self):
            print("‚úÖ SPADE Agent conectado y ejecut√°ndose")
            await asyncio.sleep(1)
            self.agent.stop()
    
    async def setup(self):
        self.add_behaviour(self.TestBehaviour())

async def main():
    try:
        agent = TestAgent("test_agent@localhost", "123")
        await agent.start()
        print("‚úÖ Agente SPADE iniciado")
        
        # Esperar un poco para que el comportamiento se ejecute
        await asyncio.sleep(3)
        
        await agent.stop()
        print("‚úÖ Agente SPADE detenido correctamente")
        return True
    except Exception as e:
        print(f"‚ùå Error en agente SPADE: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
"""
        
        with open("temp_spade_test.py", "w") as f:
            f.write(test_script)
        
        result = subprocess.run([sys.executable, "temp_spade_test.py"], 
                              capture_output=True, text=True, timeout=20)
        
        # Limpiar archivo temporal
        if os.path.exists("temp_spade_test.py"):
            os.remove("temp_spade_test.py")
        
        os.chdir(original_dir)
        
        if result.returncode == 0:
            print_success("Conexi√≥n SPADE funciona correctamente")
            return True
        else:
            print_error("Conexi√≥n SPADE fall√≥")
            print("‚ùå Error:", result.stderr[-300:])
            return False
            
    except subprocess.TimeoutExpired:
        print_error("Timeout en prueba SPADE")
        return False
    except Exception as e:
        print_error(f"Error en prueba SPADE: {e}")
        return False

def test_coordinator_quick():
    """Prueba r√°pida del coordinador distribuido"""
    print_header("Probando Coordinador Distribuido (Prueba R√°pida)")
    
    try:
        os.chdir(Path(__file__).parent / "src")
        
        # Ejecutar coordinador por unos segundos
        process = subprocess.Popen([sys.executable, "distributed_multi_host_system.py", "--type", "coordinator"],
                                 stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        # Esperar 5 segundos
        time.sleep(5)
        
        # Terminar el proceso
        process.terminate()
        stdout, stderr = process.communicate(timeout=5)
        
        # Verificar si se conect√≥ exitosamente
        if "connected and authenticated" in stdout:
            print_success("Coordinador se conect√≥ exitosamente a OpenFire")
            print_success("Sistema distribuido funcional")
            return True
        else:
            print_error("Coordinador no se pudo conectar")
            print("‚ùå Output:", stdout[-500:])
            print("‚ùå Error:", stderr[-500:])
            return False
            
    except subprocess.TimeoutExpired:
        print_error("Timeout en prueba del coordinador")
        return False
    except Exception as e:
        print_error(f"Error en prueba del coordinador: {e}")
        return False

def main():
    """Funci√≥n principal que ejecuta todas las pruebas"""
    print("üöï SISTEMA DE TAXIS DISTRIBUIDO - PRUEBA COMPREHENSIVA")
    print("=" * 60)
    
    tests = [
        ("Dependencias", test_dependencies),
        ("Docker y OpenFire", test_docker_openfire),
        ("Sistema Local", test_local_system),
        ("Conexi√≥n SPADE", test_spade_connection),
        ("Coordinador Distribuido", test_coordinator_quick),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print_error(f"Prueba '{test_name}' fall√≥")
        except Exception as e:
            print_error(f"Error en prueba '{test_name}': {e}")
    
    # Resumen final
    print_header("RESUMEN FINAL")
    print(f"‚úÖ Pruebas exitosas: {passed}/{total}")
    
    if passed == total:
        print_success("üéâ ¬°TODAS LAS PRUEBAS PASARON!")
        print_success("El sistema est√° completamente funcional")
        print("\nüìã COMANDOS PARA USAR EL SISTEMA:")
        print("   ‚Ä¢ Coordinador: python src/distributed_multi_host_system.py --type coordinator")
        print("   ‚Ä¢ Host Taxi: python src/distributed_multi_host_system.py --type taxi_host --host-id 1")
        print("   ‚Ä¢ Host Pasajero: python src/distributed_multi_host_system.py --type passenger_host --host-id 1")
        print("   ‚Ä¢ Demo Local: python src/demo_taxi_system.py")
        print("   ‚Ä¢ GUI Local: python src/taxi_dispatch_gui.py")
        return True
    else:
        print_error(f"‚ùå {total - passed} pruebas fallaron")
        print_error("Revise los errores anteriores y corrija los problemas")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
    